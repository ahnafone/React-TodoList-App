{"version":3,"sources":["components/Item.jsx","components/List.jsx","components/InputItem.jsx","components/App.jsx","index.js"],"names":["Item","props","useState","itemState","setItemState","item","crossed","style","onClick","uncross","key","textDecoration","cross","value","List","handleCross","handleUncross","items","map","elem","InputItem","setItem","className","type","onChange","event","newItem","target","name","sendItem","click","App","setItems","length","prev","index","temp","forEach","e","i","splice","deleteItems","ReactDOM","render","document","getElementById"],"mappings":"8JA0BeA,MAxBf,SAAcC,GAAQ,IAAD,EACaC,mBAAS,MADtB,mBACdC,EADc,KACHC,EADG,KAiBnB,OAdKH,EAAMI,KAAKC,SAAyB,OAAdH,GACzBC,EAAa,MAcb,wBAAIG,MAAOJ,EAAWK,QAXxB,WACOP,EAAMI,KAAKC,SAIdF,EAAa,MACbH,EAAMQ,QAAQR,EAAMI,KAAKK,OAJzBN,EAAa,CAAEO,eAAgB,iBAC/BV,EAAMW,MAAMX,EAAMI,KAAKK,QAStBT,EAAMI,KAAKQ,QCGHC,MArBf,SAAcb,GACZ,SAASc,EAAYL,GACnBT,EAAMW,MAAMF,GAEd,SAASM,EAAcN,GACrBT,EAAMQ,QAAQC,GAGhB,OACE,6BACE,4BACGT,EAAMgB,MAAMC,KAAI,SAAAC,GACf,OACE,kBAAC,EAAD,CAAMd,KAAMc,EAAMP,MAAOG,EAAaN,QAASO,UCsB5CI,MApCf,SAAmBnB,GAAQ,IAAD,EACFC,mBAAS,IADP,mBACnBG,EADmB,KACbgB,EADa,KAWxB,OACE,6BACE,yBAAKC,UAAU,WACb,2CAEF,yBAAKA,UAAU,QACb,2BAAOC,KAAK,OAAOC,SAdzB,SAAsBC,GACpB,IAAIC,EAAUD,EAAME,OAAOd,MAC3BQ,EAAQK,IAYuCE,KAAK,OAAOf,MAAOR,IAC9D,4BACEG,QAAS,WACP,IAAIqB,EAAW,CACbnB,IAAK,EACLG,MAAOR,EACPC,SAAS,GAEXL,EAAM6B,MAAMD,GAjBpBR,EAAQ,MAqBF,yCCmCKU,MA9Df,WAAgB,IAAD,EACW7B,mBAAS,IADpB,mBACRe,EADQ,KACDe,EADC,KA+Cb,OACE,yBAAKV,UAAU,aACb,kBAAC,EAAD,CAAWQ,MA9Cf,SAAiBzB,GACf,GAAmB,KAAfA,EAAKQ,MAAT,CAEAR,EAAKK,IAAMO,EAAMgB,OACjB,IAAIC,EAAI,sBAAOjB,GAAP,CAAcZ,IACtB2B,EAASE,OA0CP,kBAAC,EAAD,CAAMjB,MAAOA,EAAOL,MAvCxB,SAAmBuB,GACjB,IAAIC,EAAI,YAAOnB,GACfmB,EAAKD,GAAO7B,SAAU,EACtB0B,EAASI,IAoC+B3B,QAjC1C,SAAqB0B,GACnB,IAAIC,EAAI,YAAOnB,GACfmB,EAAKD,GAAO7B,SAAU,EACtB0B,EAASI,MA+BP,4BACE5B,QAAS,YA7Bf,WACE,IAAI4B,EAAI,YAAOnB,GAGfA,EAAMoB,SAAQ,SAAAlB,GAEV,IAAIgB,EADFhB,EAAKb,UAIP8B,EAAKC,SAAQ,SAACC,EAAGC,GACXD,EAAE5B,MAAQS,EAAKT,MAAKyB,EAAQI,MAElCH,EAAKI,OAAOL,EAAO,OAKvBC,EAAKC,SAAQ,SAACC,EAAGC,GACfD,EAAE5B,IAAM6B,KAGVP,EAASI,GASHK,KAGF,2CCxDRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.314956ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Item(props) {\r\n  var [itemState, setItemState] = useState(null);\r\n\r\n  if (!props.item.crossed && itemState !== null) {\r\n    setItemState(null);\r\n  }\r\n\r\n  function handleClick() {\r\n    if (!props.item.crossed) {\r\n      setItemState({ textDecoration: \"line-through\" });\r\n      props.cross(props.item.key);\r\n    } else {\r\n      setItemState(null);\r\n      props.uncross(props.item.key);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li style={itemState} onClick={handleClick}>\r\n      {props.item.value}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nfunction List(props) {\r\n  function handleCross(key) {\r\n    props.cross(key);\r\n  }\r\n  function handleUncross(key) {\r\n    props.uncross(key);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {props.items.map(elem => {\r\n          return (\r\n            <Item item={elem} cross={handleCross} uncross={handleUncross} />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction InputItem(props) {\r\n  var [item, setItem] = useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    var newItem = event.target.value;\r\n    setItem(newItem);\r\n  }\r\n  function clearInput() {\r\n    setItem(\"\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"heading\">\r\n        <h1>To-Do List</h1>\r\n      </div>\r\n      <div className=\"form\">\r\n        <input type=\"text\" onChange={handleChange} name=\"item\" value={item} />\r\n        <button\r\n          onClick={() => {\r\n            var sendItem = {\r\n              key: 0,\r\n              value: item,\r\n              crossed: false\r\n            };\r\n            props.click(sendItem);\r\n            clearInput();\r\n          }}\r\n        >\r\n          <span>Add</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputItem;\r\n","import React, { useState } from \"react\";\r\nimport List from \"./List\";\r\nimport InputItem from \"./InputItem\";\r\n\r\nfunction App() {\r\n  var [items, setItems] = useState([]);\r\n\r\n  function addItem(item) {\r\n    if (item.value === \"\") return;\r\n\r\n    item.key = items.length;\r\n    var prev = [...items, item];\r\n    setItems(prev);\r\n  }\r\n\r\n  function crossItem(index) {\r\n    var temp = [...items];\r\n    temp[index].crossed = true;\r\n    setItems(temp);\r\n  }\r\n\r\n  function uncrossItem(index) {\r\n    var temp = [...items];\r\n    temp[index].crossed = false;\r\n    setItems(temp);\r\n  }\r\n\r\n  function deleteItems() {\r\n    var temp = [...items];\r\n\r\n    //delete elems for which crossed attr = true\r\n    items.forEach(elem => {\r\n      if (elem.crossed) {\r\n        var index;\r\n\r\n        //locate index of elem before deleting\r\n        temp.forEach((e, i) => {\r\n          if (e.key === elem.key) index = i;\r\n        });\r\n        temp.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    //fix key values after deleting entries\r\n    temp.forEach((e, i) => {\r\n      e.key = i;\r\n    });\r\n\r\n    setItems(temp);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <InputItem click={addItem} />\r\n      <List items={items} cross={crossItem} uncross={uncrossItem} />\r\n      <button\r\n        onClick={() => {\r\n          deleteItems();\r\n        }}\r\n      >\r\n        <span>Delete</span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n//CHALLENGE: Make this app work by applying what you've learnt.\r\n//1. When new text is written into the input, its state should be saved.\r\n//2. When the add button is pressed, the current data in the input should be\r\n//added to an array.\r\n//3. The <ul> should display all the array items as <li>s\r\n"],"sourceRoot":""}